Normalization in SQL is a systematic process of organizing the columns (attributes) and tables (relations) of a relational database to minimize data redundancy and improve data integrity. 
In simpler terms, normalization helps ensure that each piece of data is stored in the best possible place, reducing duplication and making it easier to maintain and update the database.

Why Normalize?
Reduce Data Redundancy: Storing the same data multiple times can waste space and cause inconsistencies if that data needs to change.
Improve Data Integrity: Ensures that your data follows certain rules, preventing errors.
Make Maintenance Easier: Updates, deletions, and insertions become simpler and more efficient when data is well-organized.

Common Normal Forms
The most commonly taught normal forms are:

First Normal Form (1NF)
Second Normal Form (2NF)
Third Normal Form (3NF)

(There are higher normal forms like 4NF and 5NF, but they are more specialized and not always required for most practical applications. Typically, going up to 3NF or BCNF is sufficient.)


1. First Normal Form (1NF)
Definition & Purpose (1NF)
1NF requires that every column holds only atomic (indivisible) values and that there are no repeating groups.
Purpose: To ensure each field contains a single piece of data.

Before 
-- Non-1NF Table: contains multi-valued phone_numbers in a single column
CREATE TABLE Students_Non1NF (
    student_id   INT,
    student_name VARCHAR(100),
    phone_numbers VARCHAR(100)  -- e.g., '123-4567,987-6543'
);

-- Sample data insertion (non-atomic phone numbers)
INSERT INTO Students_Non1NF (student_id, student_name, phone_numbers)
VALUES (1, 'Alice', '123-4567,987-6543'),
       (2, 'Bob', '555-1212');


After 

-- Main Students table with atomic values
CREATE TABLE Students (
    student_id   INT PRIMARY KEY,
    student_name VARCHAR(100)
);

-- Separate table for phone numbers, ensuring each phone number is atomic
CREATE TABLE StudentPhones (
    student_id INT,
    phone      VARCHAR(20),
    PRIMARY KEY (student_id, phone),
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);



